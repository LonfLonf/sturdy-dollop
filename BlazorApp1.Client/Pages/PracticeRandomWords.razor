@page "/PracticeRandomWords"
@using Newtonsoft.Json

<header class="bg-dark">
    <BlazorApp1.Client.Layout.NavBar></BlazorApp1.Client.Layout.NavBar>
</header>

<main class="container-fluid">
    <div class="d-flex justify-content-center align-items-center" style="height: 100vh;">
        <div class="d-flex flex-column align-items-center" style="gap: 8rem;">

            <div class="textQuestion" style="color:@colorText">
                @textDefault
            </div>

            <select @bind="selectedValue" name="Ranking Words" id="cars" class="dropRanking">
                <option value="" disabled selected>Select a Count of Words</option>
                <option value="1">Easy</option>
                <option value="2">Reasonably easy</option>
                <option value="3">Normal</option>
                <option value="4">Reasonably Hard</option>
                <option value="5">Hard</option>
            </select>

            <input @bind="answerText" class="textQuestion" placeholder=" Put Something" />

            <div class="traductionText" style="visibility:@visibiliTyOfTraduction">
                @for (int i = 0; i < CorrectOrFalse?.Length; i++)
                {
                    var color = CorrectOrFalse[i] ? "green" : "red";
                    <span style="color:@color; margin-right: 8px;">@TraductionAnswer[i]</span>
                }
            </div>

            <div class="d-flex gap-3">
                <button type="button" class="btn btn-outline-secondary" @onclick="NextButton_Click">Next</button>
                <button type="button" class="btn btn-outline-secondary" @onclick="SubmitButton_Click">Submit</button>
            </div>

        </div>
    </div>
</main>

<footer class="bg-dark text-white text-center py-4 mt-5">
    <div class="container">
        <p class="mb-2">© 2025 - Yuri de Oliveira. All rights reserved.</p>

        <div class="d-flex justify-content-center gap-4">
            <a href="https://github.com/LonfLonf/sturdy-dollop" target="_blank" class="text-white fs-4">
                <i class="bi bi-github"></i>
            </a>
            <a href="https://www.linkedin.com/in/yuri-oliveiras/" target="_blank" class="text-white fs-4">
                <i class="bi bi-linkedin"></i>
            </a>
        </div>
    </div>
</footer>

@code {
    public string selectedValue;
    public string textDefault = "Choose a level and click Next to start.";
    public string answerText;
    public string colorText = "White";
    public string visibiliTyOfTraduction = "hidden";
    public string[] TraductionAnswer;

    public HttpClient httpClient = new HttpClient();

    Uri uri = new Uri("https://lonftaka-gbg2g5hca8b2h2b0.brazilsouth-01.azurewebsites.net/api/Words//");

    bool[] CorrectOrFalse;
    Words[] words;

    public async Task NextButton_Click()
    {
        DefaultTextConfigs();

        using HttpResponseMessage responseMessage = await httpClient.GetAsync($"{uri}{selectedValue}");

        if (responseMessage.IsSuccessStatusCode)
        {
            string content = await responseMessage.Content.ReadAsStringAsync();

            words = JsonConvert.DeserializeObject<Words[]>(content);

            if (words == null)
            {
                textDefault = "Click in Next Again - ERROR";
                return;
            }

            textDefault = string.Join(" ", words.Select(w => w.EnglishWord));
            TraductionAnswer = words.Select(w => w.PortugueseTranslation).ToArray();
        }
    }


    private async Task SubmitButton_Click()
    {

        if (string.IsNullOrEmpty(answerText))
        {
            ShowMessage("Put an answer before clicking Submit - To continue, click Next", "Red");
            return;
        }

        if (selectedValue == "0" || selectedValue == null)
        {
            ShowMessage("Chose a Level for Phrases - To continue, click Next", "Red");
            return;
        }

        WordsRequest wordsRequest = new WordsRequest();

        wordsRequest.Words = words;
        wordsRequest.Answers = answerText.Split(' ');

        string Json = JsonConvert.SerializeObject(wordsRequest);

        var content = new StringContent(Json, System.Text.Encoding.UTF8, "application/json");

        using HttpResponseMessage responseMessage = await httpClient.PostAsync(uri, content);

        if (responseMessage.IsSuccessStatusCode)
        {
            CorrectOrFalse = await responseMessage.Content.ReadFromJsonAsync<bool[]>();

            int CorrectQuestions = CorrectOrFalse.Count(x => x == true);

            if (CorrectQuestions == CorrectOrFalse.Length)
            {
                colorText = "Green";
            } 
            else if (CorrectQuestions >= 2 && CorrectQuestions <= 4)
            {
                colorText = "Orange";
                visibiliTyOfTraduction = "visible";
            }
            else
            {
                colorText = "Red";
                visibiliTyOfTraduction = "visible";
            }
        }
    }

    public void DefaultTextConfigs()
    {
        colorText = "White";
        visibiliTyOfTraduction = "hidden";
        answerText = string.Empty;
    }

    public void ShowMessage(string Message, string Color)
    {
        colorText = Color;
        textDefault = Message;
    }

    class Words
    {
        public int Id { get; set; }
        public string EnglishWord { get; set; }
        public string PortugueseTranslation { get; set; }
    }

    class WordsRequest
    {
        public Words[] Words { get; set; }
        public string[] Answers { get; set; }
    }
}
